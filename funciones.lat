

funcion tipo_contenido(texto)

    // mientra no encuentre el tipo seguimos buscando

    tipo = 0    
    mientras tipo < 200
        
        si(verificar_titulo(texto) ) 
            tipo = verificar_titulo(texto) 
        fin 
        
    fin
    retorno tipo
fin





// header
// con esto cuento cuantas almoadillas tiene la frase al principio y entrego el resultado
// si entrega de 1 a 6 es un header

funcion verificar_titulo(texto)
    contador = 0
    i = 0
    mientras texto[i] == '#'
        contador++
        i++
    fin    
    retorno contador
fin


// cita
// si hay una '>' al inicio es una cita
funcion verificar_cita(texto)

    si(empieza_con(texto,'>'))
        retorno 1 // verdadero
    sino
        retorno 0 // falso
    fin

fin

// linea
// si hay trs lineas es una linea horizontal <hr>
funcion verificar_linea(texto)
    si(empieza_con(texto,'---'))
        retorno 1 // verdadero
    sino
        retorno 0 // falso
    fin

fin

/*
****************************************************
/// lista 
funcion verificar_lista(texto)
l = longitud(texto)
    si( ( texto[0] == '*'  && texto[l-1] != '*'  )
        retorno 1
    sino
        retorno 0
    fin
fin

// lista numerica
funcion verificar_lista_numerica(texto)
l = longitud(texto)

    si( (texto[0] == '*' && texto[1] == '.' ) &&  texto[l-1] != '*' )
        retorno 1
    sino
        retorno 0
    fin
fin



/// Inclinado 
funcion verificar_inclinado(texto)

f = longitud(texto)

    si( (texto[0] == '*' && texto[1] != '*' ) && ( texto[f-1] == '*' && texto[f-2] != '*') )
        retorno 1
    sino
        retorno 0
    fin
fin

// Grueso
funcion verificar_grueso(texto)

l = longitud(texto)

    si( (texto[0] == '*' && texto[1] == '*' ) && ( texto[l-1] == '*' && texto[l-2] == '*') )
        retorno 1
    sino
        retorno 0
    fin
fin

// subrayado
funcion verificar_subrayado(texto)
l = longitud(texto)

    si( (texto[0] == '-' && texto[1] == '-' ) && ( texto[l-1] == '-' && texto[l-2] == '-' ) )
        retorno 1
    sino
        retorno 0
    fin
fin

*/