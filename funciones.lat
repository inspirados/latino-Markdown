

funcion tipo_contenido(texto)

    tipo = 'p'

    si(es_titulo(texto)==1) tipo = 'h1' fin
    si(es_titulo(texto)==2) tipo = 'h2' fin
    si(es_titulo(texto)==3) tipo = 'h3' fin
    si(es_titulo(texto)==4) tipo = 'h4' fin
    si(es_titulo(texto)==5) tipo = 'h5' fin
    si(es_titulo(texto)==6) tipo = 'h6' fin
    si(es_cita(texto))      tipo = 'cita' fin
    si(es_linea(texto))     tipo = 'linea' fin
    si(es_inclinado(texto)) tipo = 'inclinado' fin
    si(es_grueso(texto))    tipo = 'grueso' fin
    si(es_tachado(texto))   tipo = 'tachado' fin
    si(es_subrayado(texto)) tipo = 'subrayado' fin
    si(es_codigo(texto))    tipo = 'codigo' fin
       
    retorno tipo
 
fin





// header
// con esto cuento cuantas almoadillas tiene la frase al principio y entrego el resultado
// si entrega de 1 a 6 es un header

funcion es_titulo(texto)
    contador = 0
    i = 0
    mientras texto[i] == '#'        
        contador++
        i++
    fin   
    
    si(contador < 7)
        retorno contador
    sino
        retorno 0    
    fin
 
fin


// cita
// si hay una '>' al inicio es una cita
funcion es_cita(texto)
    si(empieza_con(texto,'>'))
        retorno 1 
    sino
        retorno 0 
    fin
fin

// linea
// si hay tres lineas es una linea horizontal '<hr>'
funcion es_linea(texto)
    si(empieza_con(texto,'---'))
        retorno 1
    sino
        retorno 0
    fin
fin

// es inclinado?
funcion es_inclinado(texto) 
    si(empieza_con(texto,'*') && termina_con(texto,'*'))
        retorno 1
    sino
        retorno 0
    fin
fin

// es grueso?
funcion es_grueso(texto) 
    si(empieza_con(texto,'**') && termina_con(texto,'**'))
        retorno 1
    sino
        retorno 0
    fin
fin

// es tachado?
funcion es_tachado(texto) 
    si(empieza_con(texto,'--') && termina_con(texto,'--'))
        retorno 1
    sino
        retorno 0
    fin
fin

// es subrayado?
funcion es_subrayado(texto) 
    si(empieza_con(texto,'__') && termina_con(texto,'__'))
        retorno 1
    sino
        retorno 0
    fin
fin

// es codigo?
funcion es_codigo(texto) 
    si(empieza_con(texto,'```') && termina_con(texto,'```'))
        retorno 1
    sino
        retorno 0
    fin
fin































// con esto convierto el texto en html

funcion texto_formateado(texto,tipo)

contenido = ''

    elegir(tipo)
        caso 'h1': 
            texto = subcadena(texto,1,longitud(texto)-2)
            contenido .= '<h1>'.texto.'</h1>' 
        caso 'h2':
            texto = subcadena(texto,2,longitud(texto)-4)
            contenido .= '<h2>'.texto.'</h2>' 
        caso 'h3':
            texto = subcadena(texto,4,longitud(texto)-7)
            contenido .= '<h3>'.texto.'</h3>' 
        caso 'h4':
            texto = subcadena(texto,5,longitud(texto)-9)
            contenido .= '<h4>'.texto.'</h4>' 
        caso 'h5':
            texto = subcadena(texto,6,longitud(texto)-11)
            contenido .= '<h5>'.texto.'</h5>' 
        caso 'h6':
            texto = subcadena(texto,7,longitud(texto)-13)
            contenido .= '<h6>'.texto.'</h6>' 
        caso 'inclinado':
            texto = subcadena(texto,1,longitud(texto)-2)
            contenido .= '<i>'.texto.'</i>' 
        caso 'grueso':
            texto = subcadena(texto,2,longitud(texto)-4)
            contenido .= '<b>'.texto.'</b>' 
        caso 'subrayado':
            texto = subcadena(texto,2,longitud(texto)-4)
            contenido .= '<u>'.texto.'</u>' 
        caso 'tachado': 
            texto = subcadena(texto,2,longitud(texto)-4)
            contenido .= '<strike>'.texto.'</strike>' 
        caso 'cita': 
            texto = subcadena(texto,1,longitud(texto))
            contenido .= '<blockquote>'.texto.'</blockquote>' 
        caso 'linea':
            contenido .= '<hr>'.texto.'' 
        caso 'url':
            contenido .= '<a href="url">web</a>' 
        caso 'imagen':
            contenido .= '<img src="foto.jpg">' 
        caso 'codigo': 
            contenido .= '<img src="foto.jpg">' 
        caso 'p':
            contenido .= '<p>'.texto.'</p>'
        defecto:
            contenido .= '<p>'.texto.'</p>'
    fin
    
    retorno contenido

fin